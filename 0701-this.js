// 변수를 선언하는 종류가 많은 것은 js의 특징
// a = 1;

// *var: 예전 버전에서 있었던 변수 선언방식
// 지원 문제가 있는 것
// 잔재하고 남아있고, 다운그레이드할 때
// 익스플로러 -> 크로스 브라우징 문제

// *var의 문제점
// 유연해도 너무 유연
// 에러가 생길 소지가 있을 것만 같은 것
// 오타를 내지 않는 이상은 에러가 나지 않는 것
// 이걸 제외하고는 에러가 난다

// var는 function scope 함수만 영역으로 쳐준다
// 함수를 제외한 영역은 무시

// *let: 지역변수, 전역변수의 영역이 정확히 나뉨
let data;
function a(){
  data = 'data';
};
console.log(data);

var a = '바입니다';
var a = '왜 선언이 또 될까?';
console.log(a);

let b = '렛입니다.';
b = '마음이 변했다';
console.log(b);

// *const: 항상 초기화해줘야 함
const c = '';
// const c = 'hi';
c = 'hi';
// 네임 스페이스(NS)에서 중복이 일어났다
// 네임 스페이스가 다르면 같은 이름의 변수, 상수를 상용 가능 => 그러나 권장되지 않는다

// var -> let : 99%
// let? -> const: 변하지 않게 하려고
// const 데이터타입을 변화하지 못함
// 배열이면 그 안에 원소로 무언가 추가하는 종류의 일은 가능

// *1. 옛날 코드는 원형일 때가 많기 때문에 원리를 이해하기 좋다
// 최신 코드는 많이 축약이 됨
// *2. '문제 해결 능력'에서 큰 문제가 생길 수 있다

// var는 함수의 영역을 구분한다고 해서 fucntion scope라고 하고
// let은 중괄호 영역을 구분한다고 해서 lexical scope라고 한다
// var는 함수 영역 외에는 무시하는 것이 문제
